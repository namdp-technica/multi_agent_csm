#!/usr/bin/env python3
"""
Test 1 VLM agent v·ªõi 1 ·∫£nh ƒë·ªÉ ki·ªÉm tra response
"""

import asyncio
import os
from google.adk.sessions import InMemorySessionService
from google.adk.runners import Runner
from google.genai import types
from agent.agent import vlm_agents

async def test_single_vlm():
    print("üß™ Testing single VLM agent with one image...")
    
    # Ch·ªçn 1 ·∫£nh c√≥ s·∫µn
    image_path = "tools_results/doc_27.png"  # ·∫¢nh c√≥ score cao nh·∫•t t·ª´ log tr∆∞·ªõc
    
    if not os.path.exists(image_path):
        print(f"‚ùå Image not found: {image_path}")
        return
    
    print(f"üì∑ Using image: {image_path}")
    
    # Setup session
    session_service = InMemorySessionService()
    session = await session_service.create_session(
        app_name="VLMTest", 
        user_id="test_user", 
        session_id="test_session", 
        state={}
    )
    
    # ƒê·ªçc ·∫£nh
    with open(image_path, "rb") as f:
        image_data = f.read()
    
    print(f"üìä Image size: {len(image_data)} bytes")
    
    # T·∫°o content v·ªõi text + ·∫£nh
    user_text = "Ê∏©Â∫¶Â∑ÆËç∑Èáç„ÅÆË®òÂè∑„Å´„Å§„ÅÑ„Å¶Êïô„Åà„Å¶„Åè„Å†„Åï„ÅÑ"
    
    content_parts = [
        types.Part(text=user_text),
        types.Part(inline_data=types.Blob(mime_type="image/png", data=image_data))
    ]
    
    content = types.Content(role='user', parts=content_parts)
    
    # Setup runner  
    vlm_agent = vlm_agents[0]  # S·ª≠ d·ª•ng VLMAgent1
    runner = Runner(agent=vlm_agent, app_name="VLMTest", session_service=session_service)
    
    print(f"üöÄ Testing {vlm_agent.name}...")
    
    try:
        events = runner.run_async(
            user_id="test_user",
            session_id="test_session", 
            new_message=content
        )
        
        event_count = 0
        async for event in events:
            event_count += 1
            print(f"üì° Event #{event_count}:")
            
            if hasattr(event, 'content') and event.content and event.content.parts:
                response = event.content.parts[0].text
                print(f"üí¨ VLM Response: {response}")
                if response and "‰∏çÁü•ÈÅì" not in response and "kh√¥ng bi·∫øt" not in response:
                    print("‚úÖ VLM nh·∫≠n ƒë∆∞·ª£c ·∫£nh v√† tr·∫£ l·ªùi c√≥ n·ªôi dung!")
                else:
                    print("‚ö†Ô∏è VLM v·∫´n tr·∫£ l·ªùi 'kh√¥ng bi·∫øt'")
                break
            
            if event_count >= 3:
                print("‚è∞ Reached max events")
                break
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")

if __name__ == "__main__":
    asyncio.run(test_single_vlm())